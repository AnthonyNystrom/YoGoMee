// DO NOT EDIT THIS FILE
// it has been generated from a tool
// lawrence.botley@gmail.com
using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Data;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

namespace yoGomee.Data
{
    /// <summary>
    /// Represents a Admin1 in the system
    /// </summary>
    public partial class Admin1
    {
        /// <summary>
        /// The GeoName objects for this Admin1
        /// </summary>
        public List<GeoName> GeoName
        {
            get
            {
                if (geoName == null)
                    this.geoName = this.GetGeoNameByadmin1ID();
                return geoName;
            }
            set { geoName = value; }
        }


        #region Fields and Properties

        private int _admin1ID;		//
        private int _countryID;		//
        private string _admin1CD = "";		//
        private string _name = "";		//
        private List<GeoName> geoName;		// Foreign object

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int admin1ID
        {
            get { return _admin1ID; }
            set { _admin1ID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int CountryID
        {
            get { return _countryID; }
            set { _countryID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string admin1CD
        {
            get { return _admin1CD; }
            set { _admin1CD = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Admin1()
        {

        }

        /// <summary>
        /// Instanciates a Admin1 object from the database via the admin1ID
        /// </summary>
        public Admin1(int admin1ID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAdmin1Byadmin1ID");
            db.AddInParameter(dbCommand, "admin1ID", DbType.Int32, admin1ID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("admin1ID")) { this._admin1ID = (int)dr["admin1ID"]; }
                    if (list.IsColumnPresent("CountryID")) { this._countryID = (int)dr["CountryID"]; }
                    if (list.IsColumnPresent("admin1CD")) { this._admin1CD = (string)dr["admin1CD"]; }
                    if (list.IsColumnPresent("Name")) { this._name = (string)dr["Name"]; }

                }
                else
                {
                    throw new Exception("There is no Admin1 in the database with the ID " + admin1ID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Admin1 in the database 
        /// </summary>
        public static List<Admin1> GetAllAdmin1()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllAdmin1");

            List<Admin1> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Admin1s
        /// </summary>
        public static List<Admin1> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Admin1> arr = new List<Admin1>();

            Admin1 obj;

            while (dr.Read())
            {
                obj = new Admin1();
                if (list.IsColumnPresent("admin1ID")) { obj._admin1ID = (int)dr["admin1ID"]; }
                if (list.IsColumnPresent("CountryID")) { obj._countryID = (int)dr["CountryID"]; }
                if (list.IsColumnPresent("admin1CD")) { obj._admin1CD = (string)dr["admin1CD"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Admin1s
        /// </summary>
        public static List<Admin1> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Admin1> arr = new List<Admin1>();

            Admin1 obj;

            while (dr.Read())
            {
                obj = new Admin1();
                if (list.IsColumnPresent("admin1ID")) { obj._admin1ID = (int)dr["admin1ID"]; }
                if (list.IsColumnPresent("CountryID")) { obj._countryID = (int)dr["CountryID"]; }
                if (list.IsColumnPresent("admin1CD")) { obj._admin1CD = (string)dr["admin1CD"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Admin1 object or in the case of a zero admin1ID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveAdmin1");

            db.AddInParameter(dbCommand, "admin1ID", DbType.Int32, admin1ID);
            db.AddInParameter(dbCommand, "CountryID", DbType.Int32, CountryID);
            db.AddInParameter(dbCommand, "admin1CD", DbType.String, admin1CD);
            db.AddInParameter(dbCommand, "Name", DbType.String, Name);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.admin1ID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the GeoName objects for this Admin1
        /// </summary>
        private List<GeoName> GetGeoNameByadmin1ID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetGeoNameByadmin1ID");
            db.AddInParameter(dbCommand, "admin1ID", DbType.Int32, admin1ID);

            List<GeoName> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = yoGomee.Data.GeoName.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        #endregion

    }
}

namespace yoGomee.Data
{
    /// <summary>
    /// Represents a Country in the system
    /// </summary>
    public partial class Country
    {
        /// <summary>
        /// The GeoName objects for this Country
        /// </summary>
        public List<GeoName> GeoName
        {
            get
            {
                if (geoName == null)
                    this.geoName = this.GetGeoNameByCountryID();
                return geoName;
            }
            set { geoName = value; }
        }


        /// <summary>
        /// The Admin1 objects for this Country
        /// </summary>
        public List<Admin1> Admin1
        {
            get
            {
                if (admin1 == null)
                    this.admin1 = this.GetAdmin1ByCountryID();
                return admin1;
            }
            set { admin1 = value; }
        }


        #region Fields and Properties

        private int _countryID;		//
        private string _countryCode = "";		//
        private string _name = "";		//
        private List<GeoName> geoName;		// Foreign object
        private List<Admin1> admin1;		// Foreign object

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int CountryID
        {
            get { return _countryID; }
            set { _countryID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string CountryCode
        {
            get { return _countryCode; }
            set { _countryCode = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Country()
        {

        }

        /// <summary>
        /// Instanciates a Country object from the database via the CountryID
        /// </summary>
        public Country(int CountryID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetCountryByCountryID");
            db.AddInParameter(dbCommand, "CountryID", DbType.Int32, CountryID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("CountryID")) { this._countryID = (int)dr["CountryID"]; }
                    if (list.IsColumnPresent("CountryCode")) { this._countryCode = (string)dr["CountryCode"]; }
                    if (list.IsColumnPresent("Name")) { this._name = (string)dr["Name"]; }

                }
                else
                {
                    throw new Exception("There is no Country in the database with the ID " + CountryID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Country in the database 
        /// </summary>
        public static List<Country> GetAllCountry()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllCountry");

            List<Country> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Countrys
        /// </summary>
        public static List<Country> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Country> arr = new List<Country>();

            Country obj;

            while (dr.Read())
            {
                obj = new Country();
                if (list.IsColumnPresent("CountryID")) { obj._countryID = (int)dr["CountryID"]; }
                if (list.IsColumnPresent("CountryCode")) { obj._countryCode = (string)dr["CountryCode"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Countrys
        /// </summary>
        public static List<Country> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Country> arr = new List<Country>();

            Country obj;

            while (dr.Read())
            {
                obj = new Country();
                if (list.IsColumnPresent("CountryID")) { obj._countryID = (int)dr["CountryID"]; }
                if (list.IsColumnPresent("CountryCode")) { obj._countryCode = (string)dr["CountryCode"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Country object or in the case of a zero CountryID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveCountry");

            db.AddInParameter(dbCommand, "CountryID", DbType.Int32, CountryID);
            db.AddInParameter(dbCommand, "CountryCode", DbType.String, CountryCode);
            db.AddInParameter(dbCommand, "Name", DbType.String, Name);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.CountryID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the GeoName objects for this Country
        /// </summary>
        private List<GeoName> GetGeoNameByCountryID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetGeoNameByCountryID");
            db.AddInParameter(dbCommand, "CountryID", DbType.Int32, CountryID);

            List<GeoName> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = yoGomee.Data.GeoName.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the Admin1 objects for this Country
        /// </summary>
        private List<Admin1> GetAdmin1ByCountryID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAdmin1ByCountryID");
            db.AddInParameter(dbCommand, "CountryID", DbType.Int32, CountryID);

            List<Admin1> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = yoGomee.Data.Admin1.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        #endregion

    }
}

namespace yoGomee.Data
{
    /// <summary>
    /// Represents a FeatureClass in the system
    /// </summary>
    public partial class FeatureClass
    {
        /// <summary>
        /// The FeatureCode objects for this FeatureClass
        /// </summary>
        public List<FeatureCode> FeatureCode
        {
            get
            {
                if (featureCode == null)
                    this.featureCode = this.GetFeatureCodeByFeatureClassID();
                return featureCode;
            }
            set { featureCode = value; }
        }


        /// <summary>
        /// The GeoName objects for this FeatureClass
        /// </summary>
        public List<GeoName> GeoName
        {
            get
            {
                if (geoName == null)
                    this.geoName = this.GetGeoNameByFeatureClassID();
                return geoName;
            }
            set { geoName = value; }
        }


        #region Fields and Properties

        private int _featureClassID;		//
        private string _name = "";		//
        private string _description = "";		//
        private List<FeatureCode> featureCode;		// Foreign object
        private List<GeoName> geoName;		// Foreign object

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int FeatureClassID
        {
            get { return _featureClassID; }
            set { _featureClassID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Description
        {
            get { return _description; }
            set { _description = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public FeatureClass()
        {

        }

        /// <summary>
        /// Instanciates a FeatureClass object from the database via the FeatureClassID
        /// </summary>
        public FeatureClass(int FeatureClassID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetFeatureClassByFeatureClassID");
            db.AddInParameter(dbCommand, "FeatureClassID", DbType.Int32, FeatureClassID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("FeatureClassID")) { this._featureClassID = (int)dr["FeatureClassID"]; }
                    if (list.IsColumnPresent("Name")) { this._name = (string)dr["Name"]; }
                    if (list.IsColumnPresent("Description")) { this._description = (string)dr["Description"]; }

                }
                else
                {
                    throw new Exception("There is no FeatureClass in the database with the ID " + FeatureClassID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the FeatureClass in the database 
        /// </summary>
        public static List<FeatureClass> GetAllFeatureClass()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllFeatureClass");

            List<FeatureClass> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of FeatureClasss
        /// </summary>
        public static List<FeatureClass> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<FeatureClass> arr = new List<FeatureClass>();

            FeatureClass obj;

            while (dr.Read())
            {
                obj = new FeatureClass();
                if (list.IsColumnPresent("FeatureClassID")) { obj._featureClassID = (int)dr["FeatureClassID"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }
                if (list.IsColumnPresent("Description")) { obj._description = (string)dr["Description"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of FeatureClasss
        /// </summary>
        public static List<FeatureClass> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<FeatureClass> arr = new List<FeatureClass>();

            FeatureClass obj;

            while (dr.Read())
            {
                obj = new FeatureClass();
                if (list.IsColumnPresent("FeatureClassID")) { obj._featureClassID = (int)dr["FeatureClassID"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }
                if (list.IsColumnPresent("Description")) { obj._description = (string)dr["Description"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the FeatureClass object or in the case of a zero FeatureClassID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveFeatureClass");

            db.AddInParameter(dbCommand, "FeatureClassID", DbType.Int32, FeatureClassID);
            db.AddInParameter(dbCommand, "Name", DbType.String, Name);
            db.AddInParameter(dbCommand, "Description", DbType.String, Description);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.FeatureClassID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the FeatureCode objects for this FeatureClass
        /// </summary>
        private List<FeatureCode> GetFeatureCodeByFeatureClassID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetFeatureCodeByFeatureClassID");
            db.AddInParameter(dbCommand, "FeatureClassID", DbType.Int32, FeatureClassID);

            List<FeatureCode> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = yoGomee.Data.FeatureCode.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the GeoName objects for this FeatureClass
        /// </summary>
        private List<GeoName> GetGeoNameByFeatureClassID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetGeoNameByFeatureClassID");
            db.AddInParameter(dbCommand, "FeatureClassID", DbType.Int32, FeatureClassID);

            List<GeoName> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = yoGomee.Data.GeoName.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        #endregion

    }
}

namespace yoGomee.Data
{
    /// <summary>
    /// Represents a FeatureCode in the system
    /// </summary>
    public partial class FeatureCode
    {
        /// <summary>
        /// The GeoName objects for this FeatureCode
        /// </summary>
        public List<GeoName> GeoName
        {
            get
            {
                if (geoName == null)
                    this.geoName = this.GetGeoNameByFeatureCodeID();
                return geoName;
            }
            set { geoName = value; }
        }


        #region Fields and Properties

        private int _featureCodeID;		//
        private string _featureCodeCD = "";		//
        private int _featureClassID;		//
        private string _name = "";		//
        private string _description = "";		//
        private List<GeoName> geoName;		// Foreign object

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int FeatureCodeID
        {
            get { return _featureCodeID; }
            set { _featureCodeID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string FeatureCodeCD
        {
            get { return _featureCodeCD; }
            set { _featureCodeCD = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int FeatureClassID
        {
            get { return _featureClassID; }
            set { _featureClassID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Description
        {
            get { return _description; }
            set { _description = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public FeatureCode()
        {

        }

        /// <summary>
        /// Instanciates a FeatureCode object from the database via the FeatureCodeID
        /// </summary>
        public FeatureCode(int FeatureCodeID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetFeatureCodeByFeatureCodeID");
            db.AddInParameter(dbCommand, "FeatureCodeID", DbType.Int32, FeatureCodeID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("FeatureCodeID")) { this._featureCodeID = (int)dr["FeatureCodeID"]; }
                    if (list.IsColumnPresent("FeatureCodeCD")) { this._featureCodeCD = (string)dr["FeatureCodeCD"]; }
                    if (list.IsColumnPresent("FeatureClassID")) { this._featureClassID = (int)dr["FeatureClassID"]; }
                    if (list.IsColumnPresent("Name")) { this._name = (string)dr["Name"]; }
                    if (list.IsColumnPresent("Description")) { this._description = (string)dr["Description"]; }

                }
                else
                {
                    throw new Exception("There is no FeatureCode in the database with the ID " + FeatureCodeID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the FeatureCode in the database 
        /// </summary>
        public static List<FeatureCode> GetAllFeatureCode()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllFeatureCode");

            List<FeatureCode> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of FeatureCodes
        /// </summary>
        public static List<FeatureCode> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<FeatureCode> arr = new List<FeatureCode>();

            FeatureCode obj;

            while (dr.Read())
            {
                obj = new FeatureCode();
                if (list.IsColumnPresent("FeatureCodeID")) { obj._featureCodeID = (int)dr["FeatureCodeID"]; }
                if (list.IsColumnPresent("FeatureCodeCD")) { obj._featureCodeCD = (string)dr["FeatureCodeCD"]; }
                if (list.IsColumnPresent("FeatureClassID")) { obj._featureClassID = (int)dr["FeatureClassID"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }
                if (list.IsColumnPresent("Description")) { obj._description = (string)dr["Description"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of FeatureCodes
        /// </summary>
        public static List<FeatureCode> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<FeatureCode> arr = new List<FeatureCode>();

            FeatureCode obj;

            while (dr.Read())
            {
                obj = new FeatureCode();
                if (list.IsColumnPresent("FeatureCodeID")) { obj._featureCodeID = (int)dr["FeatureCodeID"]; }
                if (list.IsColumnPresent("FeatureCodeCD")) { obj._featureCodeCD = (string)dr["FeatureCodeCD"]; }
                if (list.IsColumnPresent("FeatureClassID")) { obj._featureClassID = (int)dr["FeatureClassID"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }
                if (list.IsColumnPresent("Description")) { obj._description = (string)dr["Description"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the FeatureCode object or in the case of a zero FeatureCodeID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveFeatureCode");

            db.AddInParameter(dbCommand, "FeatureCodeID", DbType.Int32, FeatureCodeID);
            db.AddInParameter(dbCommand, "FeatureCodeCD", DbType.String, FeatureCodeCD);
            db.AddInParameter(dbCommand, "FeatureClassID", DbType.Int32, FeatureClassID);
            db.AddInParameter(dbCommand, "Name", DbType.String, Name);
            db.AddInParameter(dbCommand, "Description", DbType.String, Description);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.FeatureCodeID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the GeoName objects for this FeatureCode
        /// </summary>
        private List<GeoName> GetGeoNameByFeatureCodeID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetGeoNameByFeatureCodeID");
            db.AddInParameter(dbCommand, "FeatureCodeID", DbType.Int32, FeatureCodeID);

            List<GeoName> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = yoGomee.Data.GeoName.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        #endregion

    }
}

namespace yoGomee.Data
{
    /// <summary>
    /// Represents a Friend in the system
    /// </summary>
    public partial class Friend
    {
        #region Fields and Properties

        private int _friendID;		//
        private int _yoGomeeUserID1;		//
        private int _yoGomeeUserID2;		//
        private bool _user1Accepted;		//
        private bool _user2Accepted;		//
        private int _unfriendedUserID;		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int FriendID
        {
            get { return _friendID; }
            set { _friendID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int YoGomeeUserID1
        {
            get { return _yoGomeeUserID1; }
            set { _yoGomeeUserID1 = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int YoGomeeUserID2
        {
            get { return _yoGomeeUserID2; }
            set { _yoGomeeUserID2 = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool User1Accepted
        {
            get { return _user1Accepted; }
            set { _user1Accepted = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool User2Accepted
        {
            get { return _user2Accepted; }
            set { _user2Accepted = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int UnfriendedUserID
        {
            get { return _unfriendedUserID; }
            set { _unfriendedUserID = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Friend()
        {

        }

        /// <summary>
        /// Instanciates a Friend object from the database via the FriendID
        /// </summary>
        public Friend(int FriendID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetFriendByFriendID");
            db.AddInParameter(dbCommand, "FriendID", DbType.Int32, FriendID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("FriendID")) { this._friendID = (int)dr["FriendID"]; }
                    if (list.IsColumnPresent("YoGomeeUserID1")) { this._yoGomeeUserID1 = (int)dr["YoGomeeUserID1"]; }
                    if (list.IsColumnPresent("YoGomeeUserID2")) { this._yoGomeeUserID2 = (int)dr["YoGomeeUserID2"]; }
                    if (list.IsColumnPresent("User1Accepted")) { this._user1Accepted = (bool)dr["User1Accepted"]; }
                    if (list.IsColumnPresent("User2Accepted")) { this._user2Accepted = (bool)dr["User2Accepted"]; }
                    if (list.IsColumnPresent("UnfriendedUserID")) { this._unfriendedUserID = (int)dr["UnfriendedUserID"]; }

                }
                else
                {
                    throw new Exception("There is no Friend in the database with the ID " + FriendID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Friend in the database 
        /// </summary>
        public static List<Friend> GetAllFriend()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllFriend");

            List<Friend> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Friends
        /// </summary>
        public static List<Friend> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Friend> arr = new List<Friend>();

            Friend obj;

            while (dr.Read())
            {
                obj = new Friend();
                if (list.IsColumnPresent("FriendID")) { obj._friendID = (int)dr["FriendID"]; }
                if (list.IsColumnPresent("YoGomeeUserID1")) { obj._yoGomeeUserID1 = (int)dr["YoGomeeUserID1"]; }
                if (list.IsColumnPresent("YoGomeeUserID2")) { obj._yoGomeeUserID2 = (int)dr["YoGomeeUserID2"]; }
                if (list.IsColumnPresent("User1Accepted")) { obj._user1Accepted = (bool)dr["User1Accepted"]; }
                if (list.IsColumnPresent("User2Accepted")) { obj._user2Accepted = (bool)dr["User2Accepted"]; }
                if (list.IsColumnPresent("UnfriendedUserID")) { obj._unfriendedUserID = (int)dr["UnfriendedUserID"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Friends
        /// </summary>
        public static List<Friend> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Friend> arr = new List<Friend>();

            Friend obj;

            while (dr.Read())
            {
                obj = new Friend();
                if (list.IsColumnPresent("FriendID")) { obj._friendID = (int)dr["FriendID"]; }
                if (list.IsColumnPresent("YoGomeeUserID1")) { obj._yoGomeeUserID1 = (int)dr["YoGomeeUserID1"]; }
                if (list.IsColumnPresent("YoGomeeUserID2")) { obj._yoGomeeUserID2 = (int)dr["YoGomeeUserID2"]; }
                if (list.IsColumnPresent("User1Accepted")) { obj._user1Accepted = (bool)dr["User1Accepted"]; }
                if (list.IsColumnPresent("User2Accepted")) { obj._user2Accepted = (bool)dr["User2Accepted"]; }
                if (list.IsColumnPresent("UnfriendedUserID")) { obj._unfriendedUserID = (int)dr["UnfriendedUserID"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Friend object or in the case of a zero FriendID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveFriend");

            db.AddInParameter(dbCommand, "FriendID", DbType.Int32, FriendID);
            db.AddInParameter(dbCommand, "YoGomeeUserID1", DbType.Int32, YoGomeeUserID1);
            db.AddInParameter(dbCommand, "YoGomeeUserID2", DbType.Int32, YoGomeeUserID2);
            db.AddInParameter(dbCommand, "User1Accepted", DbType.Boolean, User1Accepted);
            db.AddInParameter(dbCommand, "User2Accepted", DbType.Boolean, User2Accepted);
            db.AddInParameter(dbCommand, "UnfriendedUserID", DbType.Int32, UnfriendedUserID);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.FriendID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace yoGomee.Data
{
    /// <summary>
    /// Represents a GeoName in the system
    /// </summary>
    public partial class GeoName
    {
        #region Fields and Properties

        private int _geoNameID;		//
        private string _name = "";		//
        private decimal _latitude;		//
        private decimal _longitude;		//
        private int _featureClassID;		//
        private int _featureCodeID;		//
        private int _countryID;		//
        private int _admin1ID;		//
        private int _population;		//
        private int _elevation;		//
        private int _gtopo3;		//
        private int _timeZoneID;		//
        private DateTime _modDate = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int GeoNameID
        {
            get { return _geoNameID; }
            set { _geoNameID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public decimal Latitude
        {
            get { return _latitude; }
            set { _latitude = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public decimal Longitude
        {
            get { return _longitude; }
            set { _longitude = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int FeatureClassID
        {
            get { return _featureClassID; }
            set { _featureClassID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int FeatureCodeID
        {
            get { return _featureCodeID; }
            set { _featureCodeID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int CountryID
        {
            get { return _countryID; }
            set { _countryID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Admin1ID
        {
            get { return _admin1ID; }
            set { _admin1ID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Population
        {
            get { return _population; }
            set { _population = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Elevation
        {
            get { return _elevation; }
            set { _elevation = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int gtopo3
        {
            get { return _gtopo3; }
            set { _gtopo3 = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int TimeZoneID
        {
            get { return _timeZoneID; }
            set { _timeZoneID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime ModDate
        {
            get { return _modDate; }
            set { _modDate = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public GeoName()
        {

        }

        /// <summary>
        /// Instanciates a GeoName object from the database via the GeoNameID
        /// </summary>
        public GeoName(int GeoNameID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetGeoNameByGeoNameID");
            db.AddInParameter(dbCommand, "GeoNameID", DbType.Int32, GeoNameID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("GeoNameID")) { this._geoNameID = (int)dr["GeoNameID"]; }
                    if (list.IsColumnPresent("Name")) { this._name = (string)dr["Name"]; }
                    if (list.IsColumnPresent("Latitude")) { this._latitude = (decimal)dr["Latitude"]; }
                    if (list.IsColumnPresent("Longitude")) { this._longitude = (decimal)dr["Longitude"]; }
                    if (list.IsColumnPresent("FeatureClassID")) { this._featureClassID = (int)dr["FeatureClassID"]; }
                    if (list.IsColumnPresent("FeatureCodeID")) { this._featureCodeID = (int)dr["FeatureCodeID"]; }
                    if (list.IsColumnPresent("CountryID")) { this._countryID = (int)dr["CountryID"]; }
                    if (list.IsColumnPresent("Admin1ID")) { this._admin1ID = (int)dr["Admin1ID"]; }
                    if (list.IsColumnPresent("Population")) { this._population = (int)dr["Population"]; }
                    if (list.IsColumnPresent("Elevation")) { this._elevation = (int)dr["Elevation"]; }
                    if (list.IsColumnPresent("gtopo3")) { this._gtopo3 = (int)dr["gtopo3"]; }
                    if (list.IsColumnPresent("TimeZoneID")) { this._timeZoneID = (int)dr["TimeZoneID"]; }
                    if (list.IsColumnPresent("ModDate")) { this._modDate = (DateTime)dr["ModDate"]; }

                }
                else
                {
                    throw new Exception("There is no GeoName in the database with the ID " + GeoNameID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the GeoName in the database 
        /// </summary>
        public static List<GeoName> GetAllGeoName()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllGeoName");

            List<GeoName> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of GeoNames
        /// </summary>
        public static List<GeoName> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<GeoName> arr = new List<GeoName>();

            GeoName obj;

            while (dr.Read())
            {
                obj = new GeoName();
                if (list.IsColumnPresent("GeoNameID")) { obj._geoNameID = (int)dr["GeoNameID"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }
                if (list.IsColumnPresent("Latitude")) { obj._latitude = (decimal)dr["Latitude"]; }
                if (list.IsColumnPresent("Longitude")) { obj._longitude = (decimal)dr["Longitude"]; }
                if (list.IsColumnPresent("FeatureClassID")) { obj._featureClassID = (int)dr["FeatureClassID"]; }
                if (list.IsColumnPresent("FeatureCodeID")) { obj._featureCodeID = (int)dr["FeatureCodeID"]; }
                if (list.IsColumnPresent("CountryID")) { obj._countryID = (int)dr["CountryID"]; }
                if (list.IsColumnPresent("Admin1ID")) { obj._admin1ID = (int)dr["Admin1ID"]; }
                if (list.IsColumnPresent("Population")) { obj._population = (int)dr["Population"]; }
                if (list.IsColumnPresent("Elevation")) { obj._elevation = (int)dr["Elevation"]; }
                if (list.IsColumnPresent("gtopo3")) { obj._gtopo3 = (int)dr["gtopo3"]; }
                if (list.IsColumnPresent("TimeZoneID")) { obj._timeZoneID = (int)dr["TimeZoneID"]; }
                if (list.IsColumnPresent("ModDate")) { obj._modDate = (DateTime)dr["ModDate"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of GeoNames
        /// </summary>
        public static List<GeoName> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<GeoName> arr = new List<GeoName>();

            GeoName obj;

            while (dr.Read())
            {
                obj = new GeoName();
                if (list.IsColumnPresent("GeoNameID")) { obj._geoNameID = (int)dr["GeoNameID"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }
                if (list.IsColumnPresent("Latitude")) { obj._latitude = (decimal)dr["Latitude"]; }
                if (list.IsColumnPresent("Longitude")) { obj._longitude = (decimal)dr["Longitude"]; }
                if (list.IsColumnPresent("FeatureClassID")) { obj._featureClassID = (int)dr["FeatureClassID"]; }
                if (list.IsColumnPresent("FeatureCodeID")) { obj._featureCodeID = (int)dr["FeatureCodeID"]; }
                if (list.IsColumnPresent("CountryID")) { obj._countryID = (int)dr["CountryID"]; }
                if (list.IsColumnPresent("Admin1ID")) { obj._admin1ID = (int)dr["Admin1ID"]; }
                if (list.IsColumnPresent("Population")) { obj._population = (int)dr["Population"]; }
                if (list.IsColumnPresent("Elevation")) { obj._elevation = (int)dr["Elevation"]; }
                if (list.IsColumnPresent("gtopo3")) { obj._gtopo3 = (int)dr["gtopo3"]; }
                if (list.IsColumnPresent("TimeZoneID")) { obj._timeZoneID = (int)dr["TimeZoneID"]; }
                if (list.IsColumnPresent("ModDate")) { obj._modDate = (DateTime)dr["ModDate"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the GeoName object or in the case of a zero GeoNameID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveGeoName");

            db.AddInParameter(dbCommand, "GeoNameID", DbType.Int32, GeoNameID);
            db.AddInParameter(dbCommand, "Name", DbType.String, Name);
            db.AddInParameter(dbCommand, "Latitude", DbType.Decimal, Latitude);
            db.AddInParameter(dbCommand, "Longitude", DbType.Decimal, Longitude);
            db.AddInParameter(dbCommand, "FeatureClassID", DbType.Int32, FeatureClassID);
            db.AddInParameter(dbCommand, "FeatureCodeID", DbType.Int32, FeatureCodeID);
            db.AddInParameter(dbCommand, "CountryID", DbType.Int32, CountryID);
            db.AddInParameter(dbCommand, "Admin1ID", DbType.Int32, Admin1ID);
            db.AddInParameter(dbCommand, "Population", DbType.Int32, Population);
            db.AddInParameter(dbCommand, "Elevation", DbType.Int32, Elevation);
            db.AddInParameter(dbCommand, "gtopo3", DbType.Int32, gtopo3);
            db.AddInParameter(dbCommand, "TimeZoneID", DbType.Int32, TimeZoneID);
            db.AddInParameter(dbCommand, "ModDate", DbType.DateTime, ModDate);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.GeoNameID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace yoGomee.Data
{
    /// <summary>
    /// Represents a Gomee in the system
    /// </summary>
    public partial class Gomee
    {
        /// <summary>
        /// The GomeeMap objects for this Gomee
        /// </summary>
        public List<GomeeMap> GomeeMap
        {
            get
            {
                if (gomeeMap == null)
                    this.gomeeMap = this.GetGomeeMapByGomeeID();
                return gomeeMap;
            }
            set { gomeeMap = value; }
        }


        #region Fields and Properties

        private int _gomeeID;		//
        private int _yoGomeeUserID;		//
        private bool _active;		//
        private decimal _latitude;		//
        private decimal _longitude;		//
        private DateTime _expiration = new DateTime(1900, 1, 1);		//
        private bool _doesExpire;		//
        private int _gomeeType;		//
        private string _rawValue1 = "";		//
        private string _rawValue2 = "";		//
        private DateTime _created = new DateTime(1900, 1, 1);		//
        private List<GomeeMap> gomeeMap;		// Foreign object

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int GomeeID
        {
            get { return _gomeeID; }
            set { _gomeeID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int YoGomeeUserID
        {
            get { return _yoGomeeUserID; }
            set { _yoGomeeUserID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Active
        {
            get { return _active; }
            set { _active = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public decimal Latitude
        {
            get { return _latitude; }
            set { _latitude = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public decimal Longitude
        {
            get { return _longitude; }
            set { _longitude = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime Expiration
        {
            get { return _expiration; }
            set { _expiration = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool DoesExpire
        {
            get { return _doesExpire; }
            set { _doesExpire = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int GomeeType
        {
            get { return _gomeeType; }
            set { _gomeeType = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string RawValue1
        {
            get { return _rawValue1; }
            set { _rawValue1 = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string RawValue2
        {
            get { return _rawValue2; }
            set { _rawValue2 = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime Created
        {
            get { return _created; }
            set { _created = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Gomee()
        {

        }

        /// <summary>
        /// Instanciates a Gomee object from the database via the GomeeID
        /// </summary>
        public Gomee(int GomeeID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetGomeeByGomeeID");
            db.AddInParameter(dbCommand, "GomeeID", DbType.Int32, GomeeID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("GomeeID")) { this._gomeeID = (int)dr["GomeeID"]; }
                    if (list.IsColumnPresent("YoGomeeUserID")) { this._yoGomeeUserID = (int)dr["YoGomeeUserID"]; }
                    if (list.IsColumnPresent("Active")) { this._active = (bool)dr["Active"]; }
                    if (list.IsColumnPresent("Latitude")) { this._latitude = (decimal)dr["Latitude"]; }
                    if (list.IsColumnPresent("Longitude")) { this._longitude = (decimal)dr["Longitude"]; }
                    if (list.IsColumnPresent("Expiration")) { this._expiration = (DateTime)dr["Expiration"]; }
                    if (list.IsColumnPresent("DoesExpire")) { this._doesExpire = (bool)dr["DoesExpire"]; }
                    if (list.IsColumnPresent("GomeeType")) { this._gomeeType = (int)dr["GomeeType"]; }
                    if (list.IsColumnPresent("RawValue1")) { this._rawValue1 = (string)dr["RawValue1"]; }
                    if (list.IsColumnPresent("RawValue2")) { this._rawValue2 = (string)dr["RawValue2"]; }
                    if (list.IsColumnPresent("Created")) { this._created = (DateTime)dr["Created"]; }

                }
                else
                {
                    throw new Exception("There is no Gomee in the database with the ID " + GomeeID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Gomee in the database 
        /// </summary>
        public static List<Gomee> GetAllGomee()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllGomee");

            List<Gomee> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Gomees
        /// </summary>
        public static List<Gomee> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Gomee> arr = new List<Gomee>();

            Gomee obj;

            while (dr.Read())
            {
                obj = new Gomee();
                if (list.IsColumnPresent("GomeeID")) { obj._gomeeID = (int)dr["GomeeID"]; }
                if (list.IsColumnPresent("YoGomeeUserID")) { obj._yoGomeeUserID = (int)dr["YoGomeeUserID"]; }
                if (list.IsColumnPresent("Active")) { obj._active = (bool)dr["Active"]; }
                if (list.IsColumnPresent("Latitude")) { obj._latitude = (decimal)dr["Latitude"]; }
                if (list.IsColumnPresent("Longitude")) { obj._longitude = (decimal)dr["Longitude"]; }
                if (list.IsColumnPresent("Expiration")) { obj._expiration = (DateTime)dr["Expiration"]; }
                if (list.IsColumnPresent("DoesExpire")) { obj._doesExpire = (bool)dr["DoesExpire"]; }
                if (list.IsColumnPresent("GomeeType")) { obj._gomeeType = (int)dr["GomeeType"]; }
                if (list.IsColumnPresent("RawValue1")) { obj._rawValue1 = (string)dr["RawValue1"]; }
                if (list.IsColumnPresent("RawValue2")) { obj._rawValue2 = (string)dr["RawValue2"]; }
                if (list.IsColumnPresent("Created")) { obj._created = (DateTime)dr["Created"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Gomees
        /// </summary>
        public static List<Gomee> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Gomee> arr = new List<Gomee>();

            Gomee obj;

            while (dr.Read())
            {
                obj = new Gomee();
                if (list.IsColumnPresent("GomeeID")) { obj._gomeeID = (int)dr["GomeeID"]; }
                if (list.IsColumnPresent("YoGomeeUserID")) { obj._yoGomeeUserID = (int)dr["YoGomeeUserID"]; }
                if (list.IsColumnPresent("Active")) { obj._active = (bool)dr["Active"]; }
                if (list.IsColumnPresent("Latitude")) { obj._latitude = (decimal)dr["Latitude"]; }
                if (list.IsColumnPresent("Longitude")) { obj._longitude = (decimal)dr["Longitude"]; }
                if (list.IsColumnPresent("Expiration")) { obj._expiration = (DateTime)dr["Expiration"]; }
                if (list.IsColumnPresent("DoesExpire")) { obj._doesExpire = (bool)dr["DoesExpire"]; }
                if (list.IsColumnPresent("GomeeType")) { obj._gomeeType = (int)dr["GomeeType"]; }
                if (list.IsColumnPresent("RawValue1")) { obj._rawValue1 = (string)dr["RawValue1"]; }
                if (list.IsColumnPresent("RawValue2")) { obj._rawValue2 = (string)dr["RawValue2"]; }
                if (list.IsColumnPresent("Created")) { obj._created = (DateTime)dr["Created"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Gomee object or in the case of a zero GomeeID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveGomee");

            db.AddInParameter(dbCommand, "GomeeID", DbType.Int32, GomeeID);
            db.AddInParameter(dbCommand, "YoGomeeUserID", DbType.Int32, YoGomeeUserID);
            db.AddInParameter(dbCommand, "Active", DbType.Boolean, Active);
            db.AddInParameter(dbCommand, "Latitude", DbType.Decimal, Latitude);
            db.AddInParameter(dbCommand, "Longitude", DbType.Decimal, Longitude);
            db.AddInParameter(dbCommand, "Expiration", DbType.DateTime, Expiration);
            db.AddInParameter(dbCommand, "DoesExpire", DbType.Boolean, DoesExpire);
            db.AddInParameter(dbCommand, "GomeeType", DbType.Int32, GomeeType);
            db.AddInParameter(dbCommand, "RawValue1", DbType.String, RawValue1);
            db.AddInParameter(dbCommand, "RawValue2", DbType.String, RawValue2);
            db.AddInParameter(dbCommand, "Created", DbType.DateTime, Created);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.GomeeID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the GomeeMap objects for this Gomee
        /// </summary>
        private List<GomeeMap> GetGomeeMapByGomeeID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetGomeeMapByGomeeID");
            db.AddInParameter(dbCommand, "GomeeID", DbType.Int32, GomeeID);

            List<GomeeMap> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = yoGomee.Data.GomeeMap.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        #endregion

    }
}

namespace yoGomee.Data
{
    /// <summary>
    /// Represents a GomeeMap in the system
    /// </summary>
    public partial class GomeeMap
    {
        #region Fields and Properties

        private int _gomeeMapID;		//
        private int _yoGomeeUserID;		//
        private int _gomeeID;		//
        private bool _proximityHit;		//
        private DateTime _proximityDateTime = new DateTime(1900, 1, 1);		//
        private bool _receivedGomee;		//
        private DateTime _receivedGomeeDateTime = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int GomeeMapID
        {
            get { return _gomeeMapID; }
            set { _gomeeMapID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int YoGomeeUserID
        {
            get { return _yoGomeeUserID; }
            set { _yoGomeeUserID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int GomeeID
        {
            get { return _gomeeID; }
            set { _gomeeID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool ProximityHit
        {
            get { return _proximityHit; }
            set { _proximityHit = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime ProximityDateTime
        {
            get { return _proximityDateTime; }
            set { _proximityDateTime = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool ReceivedGomee
        {
            get { return _receivedGomee; }
            set { _receivedGomee = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime ReceivedGomeeDateTime
        {
            get { return _receivedGomeeDateTime; }
            set { _receivedGomeeDateTime = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public GomeeMap()
        {

        }

        /// <summary>
        /// Instanciates a GomeeMap object from the database via the GomeeMapID
        /// </summary>
        public GomeeMap(int GomeeMapID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetGomeeMapByGomeeMapID");
            db.AddInParameter(dbCommand, "GomeeMapID", DbType.Int32, GomeeMapID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("GomeeMapID")) { this._gomeeMapID = (int)dr["GomeeMapID"]; }
                    if (list.IsColumnPresent("YoGomeeUserID")) { this._yoGomeeUserID = (int)dr["YoGomeeUserID"]; }
                    if (list.IsColumnPresent("GomeeID")) { this._gomeeID = (int)dr["GomeeID"]; }
                    if (list.IsColumnPresent("ProximityHit")) { this._proximityHit = (bool)dr["ProximityHit"]; }
                    if (list.IsColumnPresent("ProximityDateTime")) { this._proximityDateTime = (DateTime)dr["ProximityDateTime"]; }
                    if (list.IsColumnPresent("ReceivedGomee")) { this._receivedGomee = (bool)dr["ReceivedGomee"]; }
                    if (list.IsColumnPresent("ReceivedGomeeDateTime")) { this._receivedGomeeDateTime = (DateTime)dr["ReceivedGomeeDateTime"]; }

                }
                else
                {
                    throw new Exception("There is no GomeeMap in the database with the ID " + GomeeMapID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the GomeeMap in the database 
        /// </summary>
        public static List<GomeeMap> GetAllGomeeMap()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllGomeeMap");

            List<GomeeMap> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of GomeeMaps
        /// </summary>
        public static List<GomeeMap> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<GomeeMap> arr = new List<GomeeMap>();

            GomeeMap obj;

            while (dr.Read())
            {
                obj = new GomeeMap();
                if (list.IsColumnPresent("GomeeMapID")) { obj._gomeeMapID = (int)dr["GomeeMapID"]; }
                if (list.IsColumnPresent("YoGomeeUserID")) { obj._yoGomeeUserID = (int)dr["YoGomeeUserID"]; }
                if (list.IsColumnPresent("GomeeID")) { obj._gomeeID = (int)dr["GomeeID"]; }
                if (list.IsColumnPresent("ProximityHit")) { obj._proximityHit = (bool)dr["ProximityHit"]; }
                if (list.IsColumnPresent("ProximityDateTime")) { obj._proximityDateTime = (DateTime)dr["ProximityDateTime"]; }
                if (list.IsColumnPresent("ReceivedGomee")) { obj._receivedGomee = (bool)dr["ReceivedGomee"]; }
                if (list.IsColumnPresent("ReceivedGomeeDateTime")) { obj._receivedGomeeDateTime = (DateTime)dr["ReceivedGomeeDateTime"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of GomeeMaps
        /// </summary>
        public static List<GomeeMap> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<GomeeMap> arr = new List<GomeeMap>();

            GomeeMap obj;

            while (dr.Read())
            {
                obj = new GomeeMap();
                if (list.IsColumnPresent("GomeeMapID")) { obj._gomeeMapID = (int)dr["GomeeMapID"]; }
                if (list.IsColumnPresent("YoGomeeUserID")) { obj._yoGomeeUserID = (int)dr["YoGomeeUserID"]; }
                if (list.IsColumnPresent("GomeeID")) { obj._gomeeID = (int)dr["GomeeID"]; }
                if (list.IsColumnPresent("ProximityHit")) { obj._proximityHit = (bool)dr["ProximityHit"]; }
                if (list.IsColumnPresent("ProximityDateTime")) { obj._proximityDateTime = (DateTime)dr["ProximityDateTime"]; }
                if (list.IsColumnPresent("ReceivedGomee")) { obj._receivedGomee = (bool)dr["ReceivedGomee"]; }
                if (list.IsColumnPresent("ReceivedGomeeDateTime")) { obj._receivedGomeeDateTime = (DateTime)dr["ReceivedGomeeDateTime"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the GomeeMap object or in the case of a zero GomeeMapID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveGomeeMap");

            db.AddInParameter(dbCommand, "GomeeMapID", DbType.Int32, GomeeMapID);
            db.AddInParameter(dbCommand, "YoGomeeUserID", DbType.Int32, YoGomeeUserID);
            db.AddInParameter(dbCommand, "GomeeID", DbType.Int32, GomeeID);
            db.AddInParameter(dbCommand, "ProximityHit", DbType.Boolean, ProximityHit);
            db.AddInParameter(dbCommand, "ProximityDateTime", DbType.DateTime, ProximityDateTime);
            db.AddInParameter(dbCommand, "ReceivedGomee", DbType.Boolean, ReceivedGomee);
            db.AddInParameter(dbCommand, "ReceivedGomeeDateTime", DbType.DateTime, ReceivedGomeeDateTime);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.GomeeMapID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace yoGomee.Data
{
    /// <summary>
    /// Represents a ISOLanguage in the system
    /// </summary>
    public partial class ISOLanguage
    {
        #region Fields and Properties

        private int _iSOLanguageID;		//
        private string _iSO639_1 = "";		//
        private string _iSO639_2 = "";		//
        private string _iSO639_3 = "";		//
        private string _name = "";		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int ISOLanguageID
        {
            get { return _iSOLanguageID; }
            set { _iSOLanguageID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ISO639_1
        {
            get { return _iSO639_1; }
            set { _iSO639_1 = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ISO639_2
        {
            get { return _iSO639_2; }
            set { _iSO639_2 = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ISO639_3
        {
            get { return _iSO639_3; }
            set { _iSO639_3 = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public ISOLanguage()
        {

        }

        /// <summary>
        /// Instanciates a ISOLanguage object from the database via the ISOLanguageID
        /// </summary>
        public ISOLanguage(int ISOLanguageID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetISOLanguageByISOLanguageID");
            db.AddInParameter(dbCommand, "ISOLanguageID", DbType.Int32, ISOLanguageID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("ISOLanguageID")) { this._iSOLanguageID = (int)dr["ISOLanguageID"]; }
                    if (list.IsColumnPresent("ISO639_1")) { this._iSO639_1 = (string)dr["ISO639_1"]; }
                    if (list.IsColumnPresent("ISO639_2")) { this._iSO639_2 = (string)dr["ISO639_2"]; }
                    if (list.IsColumnPresent("ISO639_3")) { this._iSO639_3 = (string)dr["ISO639_3"]; }
                    if (list.IsColumnPresent("Name")) { this._name = (string)dr["Name"]; }

                }
                else
                {
                    throw new Exception("There is no ISOLanguage in the database with the ID " + ISOLanguageID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the ISOLanguage in the database 
        /// </summary>
        public static List<ISOLanguage> GetAllISOLanguage()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllISOLanguage");

            List<ISOLanguage> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of ISOLanguages
        /// </summary>
        public static List<ISOLanguage> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<ISOLanguage> arr = new List<ISOLanguage>();

            ISOLanguage obj;

            while (dr.Read())
            {
                obj = new ISOLanguage();
                if (list.IsColumnPresent("ISOLanguageID")) { obj._iSOLanguageID = (int)dr["ISOLanguageID"]; }
                if (list.IsColumnPresent("ISO639_1")) { obj._iSO639_1 = (string)dr["ISO639_1"]; }
                if (list.IsColumnPresent("ISO639_2")) { obj._iSO639_2 = (string)dr["ISO639_2"]; }
                if (list.IsColumnPresent("ISO639_3")) { obj._iSO639_3 = (string)dr["ISO639_3"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of ISOLanguages
        /// </summary>
        public static List<ISOLanguage> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<ISOLanguage> arr = new List<ISOLanguage>();

            ISOLanguage obj;

            while (dr.Read())
            {
                obj = new ISOLanguage();
                if (list.IsColumnPresent("ISOLanguageID")) { obj._iSOLanguageID = (int)dr["ISOLanguageID"]; }
                if (list.IsColumnPresent("ISO639_1")) { obj._iSO639_1 = (string)dr["ISO639_1"]; }
                if (list.IsColumnPresent("ISO639_2")) { obj._iSO639_2 = (string)dr["ISO639_2"]; }
                if (list.IsColumnPresent("ISO639_3")) { obj._iSO639_3 = (string)dr["ISO639_3"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the ISOLanguage object or in the case of a zero ISOLanguageID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveISOLanguage");

            db.AddInParameter(dbCommand, "ISOLanguageID", DbType.Int32, ISOLanguageID);
            db.AddInParameter(dbCommand, "ISO639_1", DbType.String, ISO639_1);
            db.AddInParameter(dbCommand, "ISO639_2", DbType.String, ISO639_2);
            db.AddInParameter(dbCommand, "ISO639_3", DbType.String, ISO639_3);
            db.AddInParameter(dbCommand, "Name", DbType.String, Name);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.ISOLanguageID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace yoGomee.Data
{
    /// <summary>
    /// Represents a Metadata in the system
    /// </summary>
    public partial class Metadata
    {
        #region Fields and Properties

        private int _metaDataID;		//
        private DateTime _geoNamesModDate = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int MetaDataID
        {
            get { return _metaDataID; }
            set { _metaDataID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime GeoNamesModDate
        {
            get { return _geoNamesModDate; }
            set { _geoNamesModDate = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Metadata()
        {

        }

        /// <summary>
        /// Instanciates a Metadata object from the database via the MetaDataID
        /// </summary>
        public Metadata(int MetaDataID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMetadataByMetaDataID");
            db.AddInParameter(dbCommand, "MetaDataID", DbType.Int32, MetaDataID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("MetaDataID")) { this._metaDataID = (int)dr["MetaDataID"]; }
                    if (list.IsColumnPresent("GeoNamesModDate")) { this._geoNamesModDate = (DateTime)dr["GeoNamesModDate"]; }

                }
                else
                {
                    throw new Exception("There is no Metadata in the database with the ID " + MetaDataID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Metadata in the database 
        /// </summary>
        public static List<Metadata> GetAllMetadata()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllMetadata");

            List<Metadata> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Metadatas
        /// </summary>
        public static List<Metadata> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Metadata> arr = new List<Metadata>();

            Metadata obj;

            while (dr.Read())
            {
                obj = new Metadata();
                if (list.IsColumnPresent("MetaDataID")) { obj._metaDataID = (int)dr["MetaDataID"]; }
                if (list.IsColumnPresent("GeoNamesModDate")) { obj._geoNamesModDate = (DateTime)dr["GeoNamesModDate"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Metadatas
        /// </summary>
        public static List<Metadata> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Metadata> arr = new List<Metadata>();

            Metadata obj;

            while (dr.Read())
            {
                obj = new Metadata();
                if (list.IsColumnPresent("MetaDataID")) { obj._metaDataID = (int)dr["MetaDataID"]; }
                if (list.IsColumnPresent("GeoNamesModDate")) { obj._geoNamesModDate = (DateTime)dr["GeoNamesModDate"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Metadata object or in the case of a zero MetaDataID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveMetadata");

            db.AddInParameter(dbCommand, "MetaDataID", DbType.Int32, MetaDataID);
            db.AddInParameter(dbCommand, "GeoNamesModDate", DbType.DateTime, GeoNamesModDate);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.MetaDataID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace yoGomee.Data
{
    /// <summary>
    /// Represents a TimeZone in the system
    /// </summary>
    public partial class TimeZone
    {
        /// <summary>
        /// The GeoName objects for this TimeZone
        /// </summary>
        public List<GeoName> GeoName
        {
            get
            {
                if (geoName == null)
                    this.geoName = this.GetGeoNameByTimeZoneID();
                return geoName;
            }
            set { geoName = value; }
        }


        #region Fields and Properties

        private int _timeZoneID;		//
        private string _timeZoneCD = "";		//
        private decimal _gMTOffSet;		//
        private decimal _dSTOffSet;		//
        private List<GeoName> geoName;		// Foreign object

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int TimeZoneID
        {
            get { return _timeZoneID; }
            set { _timeZoneID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string TimeZoneCD
        {
            get { return _timeZoneCD; }
            set { _timeZoneCD = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public decimal GMTOffSet
        {
            get { return _gMTOffSet; }
            set { _gMTOffSet = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public decimal DSTOffSet
        {
            get { return _dSTOffSet; }
            set { _dSTOffSet = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public TimeZone()
        {

        }

        /// <summary>
        /// Instanciates a TimeZone object from the database via the TimeZoneID
        /// </summary>
        public TimeZone(int TimeZoneID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetTimeZoneByTimeZoneID");
            db.AddInParameter(dbCommand, "TimeZoneID", DbType.Int32, TimeZoneID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("TimeZoneID")) { this._timeZoneID = (int)dr["TimeZoneID"]; }
                    if (list.IsColumnPresent("TimeZoneCD")) { this._timeZoneCD = (string)dr["TimeZoneCD"]; }
                    if (list.IsColumnPresent("GMTOffSet")) { this._gMTOffSet = (decimal)dr["GMTOffSet"]; }
                    if (list.IsColumnPresent("DSTOffSet")) { this._dSTOffSet = (decimal)dr["DSTOffSet"]; }

                }
                else
                {
                    throw new Exception("There is no TimeZone in the database with the ID " + TimeZoneID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the TimeZone in the database 
        /// </summary>
        public static List<TimeZone> GetAllTimeZone()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllTimeZone");

            List<TimeZone> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of TimeZones
        /// </summary>
        public static List<TimeZone> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<TimeZone> arr = new List<TimeZone>();

            TimeZone obj;

            while (dr.Read())
            {
                obj = new TimeZone();
                if (list.IsColumnPresent("TimeZoneID")) { obj._timeZoneID = (int)dr["TimeZoneID"]; }
                if (list.IsColumnPresent("TimeZoneCD")) { obj._timeZoneCD = (string)dr["TimeZoneCD"]; }
                if (list.IsColumnPresent("GMTOffSet")) { obj._gMTOffSet = (decimal)dr["GMTOffSet"]; }
                if (list.IsColumnPresent("DSTOffSet")) { obj._dSTOffSet = (decimal)dr["DSTOffSet"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of TimeZones
        /// </summary>
        public static List<TimeZone> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<TimeZone> arr = new List<TimeZone>();

            TimeZone obj;

            while (dr.Read())
            {
                obj = new TimeZone();
                if (list.IsColumnPresent("TimeZoneID")) { obj._timeZoneID = (int)dr["TimeZoneID"]; }
                if (list.IsColumnPresent("TimeZoneCD")) { obj._timeZoneCD = (string)dr["TimeZoneCD"]; }
                if (list.IsColumnPresent("GMTOffSet")) { obj._gMTOffSet = (decimal)dr["GMTOffSet"]; }
                if (list.IsColumnPresent("DSTOffSet")) { obj._dSTOffSet = (decimal)dr["DSTOffSet"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the TimeZone object or in the case of a zero TimeZoneID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveTimeZone");

            db.AddInParameter(dbCommand, "TimeZoneID", DbType.Int32, TimeZoneID);
            db.AddInParameter(dbCommand, "TimeZoneCD", DbType.String, TimeZoneCD);
            db.AddInParameter(dbCommand, "GMTOffSet", DbType.Decimal, GMTOffSet);
            db.AddInParameter(dbCommand, "DSTOffSet", DbType.Decimal, DSTOffSet);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.TimeZoneID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the GeoName objects for this TimeZone
        /// </summary>
        private List<GeoName> GetGeoNameByTimeZoneID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetGeoNameByTimeZoneID");
            db.AddInParameter(dbCommand, "TimeZoneID", DbType.Int32, TimeZoneID);

            List<GeoName> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = yoGomee.Data.GeoName.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        #endregion

    }
}

namespace yoGomee.Data
{
    /// <summary>
    /// Represents a YoGomeeUser in the system
    /// </summary>
    public partial class YoGomeeUser
    {
        /// <summary>
        /// The GomeeMap objects for this YoGomeeUser
        /// </summary>
        public List<GomeeMap> GomeeMap
        {
            get
            {
                if (gomeeMap == null)
                    this.gomeeMap = this.GetGomeeMapByYoGomeeUserID();
                return gomeeMap;
            }
            set { gomeeMap = value; }
        }


        /// <summary>
        /// The Gomee objects for this YoGomeeUser
        /// </summary>
        public List<Gomee> Gomee
        {
            get
            {
                if (gomee == null)
                    this.gomee = this.GetGomeeByYoGomeeUserID();
                return gomee;
            }
            set { gomee = value; }
        }


        #region Fields and Properties

        private int _yoGomeeUserID;		//
        private string _firstName = "";		//
        private string _lastName = "";		//
        private string _emailAddress = "";		//
        private string _password = "";		//
        private string _phoneNumber = "";		//
        private int _phoneModel;		//
        private string _iSOCountry = "";		//
        private string _signupIPAddress = "";		//
        private DateTime _created = new DateTime(1900, 1, 1);		//
        private List<GomeeMap> gomeeMap;		// Foreign object
        private List<Gomee> gomee;		// Foreign object

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int YoGomeeUserID
        {
            get { return _yoGomeeUserID; }
            set { _yoGomeeUserID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string FirstName
        {
            get { return _firstName; }
            set { _firstName = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string LastName
        {
            get { return _lastName; }
            set { _lastName = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string EmailAddress
        {
            get { return _emailAddress; }
            set { _emailAddress = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Password
        {
            get { return _password; }
            set { _password = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string PhoneNumber
        {
            get { return _phoneNumber; }
            set { _phoneNumber = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int PhoneModel
        {
            get { return _phoneModel; }
            set { _phoneModel = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ISOCountry
        {
            get { return _iSOCountry; }
            set { _iSOCountry = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string SignupIPAddress
        {
            get { return _signupIPAddress; }
            set { _signupIPAddress = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime Created
        {
            get { return _created; }
            set { _created = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public YoGomeeUser()
        {

        }

        /// <summary>
        /// Instanciates a YoGomeeUser object from the database via the YoGomeeUserID
        /// </summary>
        public YoGomeeUser(int YoGomeeUserID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetYoGomeeUserByYoGomeeUserID");
            db.AddInParameter(dbCommand, "YoGomeeUserID", DbType.Int32, YoGomeeUserID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("YoGomeeUserID")) { this._yoGomeeUserID = (int)dr["YoGomeeUserID"]; }
                    if (list.IsColumnPresent("FirstName")) { this._firstName = (string)dr["FirstName"]; }
                    if (list.IsColumnPresent("LastName")) { this._lastName = (string)dr["LastName"]; }
                    if (list.IsColumnPresent("EmailAddress")) { this._emailAddress = (string)dr["EmailAddress"]; }
                    if (list.IsColumnPresent("Password")) { this._password = (string)dr["Password"]; }
                    if (list.IsColumnPresent("PhoneNumber")) { this._phoneNumber = (string)dr["PhoneNumber"]; }
                    if (list.IsColumnPresent("PhoneModel")) { this._phoneModel = (int)dr["PhoneModel"]; }
                    if (list.IsColumnPresent("ISOCountry")) { this._iSOCountry = (string)dr["ISOCountry"]; }
                    if (list.IsColumnPresent("SignupIPAddress")) { this._signupIPAddress = (string)dr["SignupIPAddress"]; }
                    if (list.IsColumnPresent("Created")) { this._created = (DateTime)dr["Created"]; }

                }
                else
                {
                    throw new Exception("There is no YoGomeeUser in the database with the ID " + YoGomeeUserID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the YoGomeeUser in the database 
        /// </summary>
        public static List<YoGomeeUser> GetAllYoGomeeUser()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllYoGomeeUser");

            List<YoGomeeUser> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of YoGomeeUsers
        /// </summary>
        public static List<YoGomeeUser> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<YoGomeeUser> arr = new List<YoGomeeUser>();

            YoGomeeUser obj;

            while (dr.Read())
            {
                obj = new YoGomeeUser();
                if (list.IsColumnPresent("YoGomeeUserID")) { obj._yoGomeeUserID = (int)dr["YoGomeeUserID"]; }
                if (list.IsColumnPresent("FirstName")) { obj._firstName = (string)dr["FirstName"]; }
                if (list.IsColumnPresent("LastName")) { obj._lastName = (string)dr["LastName"]; }
                if (list.IsColumnPresent("EmailAddress")) { obj._emailAddress = (string)dr["EmailAddress"]; }
                if (list.IsColumnPresent("Password")) { obj._password = (string)dr["Password"]; }
                if (list.IsColumnPresent("PhoneNumber")) { obj._phoneNumber = (string)dr["PhoneNumber"]; }
                if (list.IsColumnPresent("PhoneModel")) { obj._phoneModel = (int)dr["PhoneModel"]; }
                if (list.IsColumnPresent("ISOCountry")) { obj._iSOCountry = (string)dr["ISOCountry"]; }
                if (list.IsColumnPresent("SignupIPAddress")) { obj._signupIPAddress = (string)dr["SignupIPAddress"]; }
                if (list.IsColumnPresent("Created")) { obj._created = (DateTime)dr["Created"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of YoGomeeUsers
        /// </summary>
        public static List<YoGomeeUser> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<YoGomeeUser> arr = new List<YoGomeeUser>();

            YoGomeeUser obj;

            while (dr.Read())
            {
                obj = new YoGomeeUser();
                if (list.IsColumnPresent("YoGomeeUserID")) { obj._yoGomeeUserID = (int)dr["YoGomeeUserID"]; }
                if (list.IsColumnPresent("FirstName")) { obj._firstName = (string)dr["FirstName"]; }
                if (list.IsColumnPresent("LastName")) { obj._lastName = (string)dr["LastName"]; }
                if (list.IsColumnPresent("EmailAddress")) { obj._emailAddress = (string)dr["EmailAddress"]; }
                if (list.IsColumnPresent("Password")) { obj._password = (string)dr["Password"]; }
                if (list.IsColumnPresent("PhoneNumber")) { obj._phoneNumber = (string)dr["PhoneNumber"]; }
                if (list.IsColumnPresent("PhoneModel")) { obj._phoneModel = (int)dr["PhoneModel"]; }
                if (list.IsColumnPresent("ISOCountry")) { obj._iSOCountry = (string)dr["ISOCountry"]; }
                if (list.IsColumnPresent("SignupIPAddress")) { obj._signupIPAddress = (string)dr["SignupIPAddress"]; }
                if (list.IsColumnPresent("Created")) { obj._created = (DateTime)dr["Created"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the YoGomeeUser object or in the case of a zero YoGomeeUserID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveYoGomeeUser");

            db.AddInParameter(dbCommand, "YoGomeeUserID", DbType.Int32, YoGomeeUserID);
            db.AddInParameter(dbCommand, "FirstName", DbType.String, FirstName);
            db.AddInParameter(dbCommand, "LastName", DbType.String, LastName);
            db.AddInParameter(dbCommand, "EmailAddress", DbType.String, EmailAddress);
            db.AddInParameter(dbCommand, "Password", DbType.String, Password);
            db.AddInParameter(dbCommand, "PhoneNumber", DbType.String, PhoneNumber);
            db.AddInParameter(dbCommand, "PhoneModel", DbType.Int32, PhoneModel);
            db.AddInParameter(dbCommand, "ISOCountry", DbType.String, ISOCountry);
            db.AddInParameter(dbCommand, "SignupIPAddress", DbType.String, SignupIPAddress);
            db.AddInParameter(dbCommand, "Created", DbType.DateTime, Created);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.YoGomeeUserID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the GomeeMap objects for this YoGomeeUser
        /// </summary>
        private List<GomeeMap> GetGomeeMapByYoGomeeUserID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetGomeeMapByYoGomeeUserID");
            db.AddInParameter(dbCommand, "YoGomeeUserID", DbType.Int32, YoGomeeUserID);

            List<GomeeMap> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = yoGomee.Data.GomeeMap.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the Gomee objects for this YoGomeeUser
        /// </summary>
        private List<Gomee> GetGomeeByYoGomeeUserID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetGomeeByYoGomeeUserID");
            db.AddInParameter(dbCommand, "YoGomeeUserID", DbType.Int32, YoGomeeUserID);

            List<Gomee> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = yoGomee.Data.Gomee.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        #endregion

    }
}
